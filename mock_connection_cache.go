// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIConnection is a mock of IConnection interface.
type MockIConnection struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectionMockRecorder
}

// MockIConnectionMockRecorder is the mock recorder for MockIConnection.
type MockIConnectionMockRecorder struct {
	mock *MockIConnection
}

// NewMockIConnection creates a new mock instance.
func NewMockIConnection(ctrl *gomock.Controller) *MockIConnection {
	mock := &MockIConnection{ctrl: ctrl}
	mock.recorder = &MockIConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnection) EXPECT() *MockIConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIConnection) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockIConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIConnection)(nil).Close))
}

// Open mocks base method.
func (m *MockIConnection) Open() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Open")
}

// Open indicates an expected call of Open.
func (mr *MockIConnectionMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockIConnection)(nil).Open))
}

// MockIConnectionCache is a mock of IConnectionCache interface.
type MockIConnectionCache struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectionCacheMockRecorder
}

// MockIConnectionCacheMockRecorder is the mock recorder for MockIConnectionCache.
type MockIConnectionCacheMockRecorder struct {
	mock *MockIConnectionCache
}

// NewMockIConnectionCache creates a new mock instance.
func NewMockIConnectionCache(ctrl *gomock.Controller) *MockIConnectionCache {
	mock := &MockIConnectionCache{ctrl: ctrl}
	mock.recorder = &MockIConnectionCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectionCache) EXPECT() *MockIConnectionCacheMockRecorder {
	return m.recorder
}

// GetConnection mocks base method.
func (m *MockIConnectionCache) GetConnection(ipAddress int32) (IConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", ipAddress)
	ret0, _ := ret[0].(IConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockIConnectionCacheMockRecorder) GetConnection(ipAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockIConnectionCache)(nil).GetConnection), ipAddress)
}

// OnNewRemoteConnection mocks base method.
func (m *MockIConnectionCache) OnNewRemoteConnection(ipAddress int32, conn IConnection) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnNewRemoteConnection", ipAddress, conn)
}

// OnNewRemoteConnection indicates an expected call of OnNewRemoteConnection.
func (mr *MockIConnectionCacheMockRecorder) OnNewRemoteConnection(ipAddress, conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnNewRemoteConnection", reflect.TypeOf((*MockIConnectionCache)(nil).OnNewRemoteConnection), ipAddress, conn)
}

// Shutdown mocks base method.
func (m *MockIConnectionCache) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockIConnectionCacheMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockIConnectionCache)(nil).Shutdown))
}
